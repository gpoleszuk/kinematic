


SqliteLogger::SqliteLogger(const char* filename, RawReceiver& gps, int station_id)
                 : filename(filename), gps(gps), station_id(station_id)
{
    // Open the database
    ErrCode = Initialize();
    if (ErrCode != OK) Cleanup();
}


SqliteLogger::OutputEpoch()
{
    // for each valid observation
    for (int s=0; s<MaxSats; s++) {
        if (!gps.valid[s]) continue;

        // Insert observation into the database
        sqlite3_bind_int(insert, 1, station_id);
        sqlite3_bind_int64(insert, 2, gps.Time);
        sqlite3_bind_int(insert, 3, SatToSvid(s));
        sqlite3_bind_double(insert, 4, gps.obs[s].PR);
        sqlite3_bind_double(insert, 5, gps.obs[s].phase);
        sqlite3_bind_double(insert, 6, gps.obs[s].doppler);
        sqlite3_bind_double(insert, 7, gps.obs[s].snr;
        sqlite3_bind_int(insert, 8, gps.obs[s].slipped);
        if (sqlite3_step(insert) != SQLITE_OK)
            return Error("Can't insert observation: %s\n", sqlite3_errmsg(db)); 
    }

    return OK;
}



SqliteLogger::~SqliteLogger()
{
    Cleanup();
}



SqliteLogger::Initialize()
{
 
    // Open the database
    if (sqlite3_open(filename, &db) != SQLITE_OK)
        return Error("Can't open database at %s: %s\n", filename, sqlite3_errmsg(db));

    // Create the observation table if not already done
    const char* sql 
    sql = "create table if not exists observation "
                  " (station_id int16 primary key foreign key(stations.id), " 
                  "  time       int64 primary key, "
                  "  svid       int8  primary key, "
                  "  PR         double, "
                  "  phase      double, "
                  "  doppler    double, "
                  "  snr        double, "
                  "  slipped    boolean);";                  

    if (sqlite3_exec(db, sql, NULL, NULL, NULL) != SQL_OK)
        return Error("Sqlite logger %s can't create the observation tables: %s\n", 
                       filename, sqlite3_errmsg(db));

    // Prepare an insert statement
    sql = "insert (?, ?, ?, ?, ?, ?, ?, ?) into observation "
                  (station_id, time, svid, PR, phase, doppler,snr, slipped);";
    if (sqlite3_prepare_v2(db, sql, strlen(sql), &insert, NULL) != SQLITE_OK)
        return Error("Unable to precompile insert stmt: %s\n", sqlite3_errmsg(db));
        
    // Save a copy of the filename for future error messages
    const char* tmp = filename;
    filename = (const char*)malloc(sizeof(filename));
    if (filename == 0)
        return Error("Out of memory opening Sqlite file %s\n", tmp);
    filename = tmp;

}



Sqlitelogger::Cleanup()
{
    if (insert != NULL) sqlite3_finalize(insert);
    insert = NULL;
    if (db != NULL) sqlite3_close(db);
    db = NULL;
    if (filename != NULL) free(filename);
    filename = NULL;
}

